import { IRequest, IResponse } from '../../@types';

import {
  <%= props.moduleNameUpper %>ToCreateDto,
  <%= props.moduleNameUpper %>CreatingDto,
  <%= props.moduleNameUpper %>CreatedDto,
  <%= props.moduleNameUpper %>ToUpdateDto,
} from './dto/index.dto';

import <%= props.moduleNameLower %>Repository from './<%= props.moduleNameLower %>.repository';

// import <%= props.moduleNameLower %>Service from './<%= props.moduleNameLower %>.service';

class <%= props.moduleNameUpper %>Controller {
  async store(req: IRequest, res: IResponse) {
    try {
      // === Get Vars === //
      const <%= props.moduleNameLower %>: <%= props.moduleNameUpper %>ToCreateDto = new <%= props.moduleNameUpper %>ToCreateDto(req.body);

      // === Generate Vars === //
      // const <%= props.moduleNameLower %>Property: number = await <%= props.moduleNameLower %>Service.serviceFunction();

      // === Create Dto === //
      const <%= props.moduleNameLower %>CreatingDto: <%= props.moduleNameUpper %>CreatingDto = new <%= props.moduleNameUpper %>CreatingDto({
        ...<%= props.moduleNameLower %>,
        // <%= props.moduleNameLower %>_property: <%= props.moduleNameLower %>Property,
      });

      // === Create Object === //
      const <%= props.moduleNameLower %>Created: <%= props.moduleNameUpper %>CreatedDto = await <%= props.moduleNameLower %>Repository.create(
        <%= props.moduleNameLower %>CreatingDto,
      );

      return res.status(201).json(<%= props.moduleNameLower %>Created);
    } catch (error) {
      return res.status(401).json({ error_msg: `Error! ${error}` });
    }
  }

  async index(req: IRequest, res: IResponse) {
    try {
      const { id } = req.params;

      const <%= props.moduleNameLower %>: <%= props.moduleNameUpper %>CreatedDto = await <%= props.moduleNameLower %>Repository.getOneById(id);

      return res.status(201).json(<%= props.moduleNameLower %>);
    } catch (error) {
      return res.status(401).json({ error_msg: `Error! ${error}` });
    }
  }

  async show(req: IRequest, res: IResponse) {
    try {
      const { property, sort, itensPerPage, pagination } = req.query;

      const <%= props.moduleNameLower %>: Array<<%= props.moduleNameUpper %>CreatedDto> = await <%= props.moduleNameLower %>Repository.listAll(
        property,
        sort,
        itensPerPage,
        pagination,
      );

      return res.status(201).json(<%= props.moduleNameLower %>);
    } catch (error) {
      return res.status(401).json({ error_msg: `Error! ${error}` });
    }
  }

  async delete(req: IRequest, res: IResponse) {
    try {
      const { id } = req.params;

      await <%= props.moduleNameLower %>Repository.deleteById(id);

      return res
        .status(201)
        .json({ success_msg: `Success! Your <%= props.moduleNameLower %> was deleted` });
    } catch (error) {
      return res.status(401).json({ error_msg: `Error! ${error}` });
    }
  }

  async update(req: IRequest, res: IResponse) {
    try {
      const { id } = req.params;
      const data: <%= props.moduleNameUpper %>ToUpdateDto = new <%= props.moduleNameUpper %>ToUpdateDto(req.body);

      const <%= props.moduleNameLower %>Updated: <%= props.moduleNameUpper %>CreatedDto = await <%= props.moduleNameLower %>Repository.updateById(
        id,
        data,
      );

      return res.status(201).json(<%= props.moduleNameLower %>Updated);
    } catch (error) {
      return res.status(401).json({ error_msg: `Error! ${error}` });
    }
  }
}

export default new <%= props.moduleNameUpper %>Controller();
