import { Schema } from 'mongoose';
import User from '../../schemas/User';

import {
  UserCreatingDto,
  UserCreatedDto,
  UserToUpdateDto,
} from './dto/index.dto';

class UserRepository {
  async create(user: UserCreatingDto): Promise<UserCreatedDto> {
    const userCreate = new User(user);

    try {
      await userCreate.save()
      return true;
    } catch {
      throw new Error(`Error to create user`);
    }
  }

  async getOneById(id: Schema.Types.ObjectId): Promise<UserCreatedDto> {
    const user: UserCreatedDto = await User.findById(id);
    if (user) return user;

    throw new Error(`Error to get user`);
  }

  async listAll(
    property: string,
    sort: string,
    itensPerPage: number,
    pagination: number,
  ): Promise<Array<UserCreatedDto>> {
    const users: Array<UserCreatedDto> = await User.find({}, (error, docs) => {
      if (!error) return docs;
      throw error;
    })
      .sort([[property, sort]])
      .skip(pagination)
      .limit(itensPerPage)
      .exec();

    if (users) return users;

    throw new Error(`Error to list categories`);
  }

  async updateById(
    id: Schema.Types.ObjectId,
    data: UserToUpdateDto,
  ): Promise<UserCreatedDto> {
    try  {
      await User.findByIdAndUpdate(
        id,
        data,
        (error, document) => {
          if (!error) return document;
          throw error;
        },
      );
      return true;
    } catch {
      throw new Error(`Error to update user`);
    }
  }

  async deleteById(id: Schema.Types.ObjectId): Promise<Boolean> {
    if (await User.deleteOne({ _id: id })) return true;

    throw new Error(`Error to delete user`);
  }
}

export default new UserRepository();
